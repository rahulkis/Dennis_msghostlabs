{"version":3,"sources":["App.tsx","store/reducers/setupWizardReducer.ts","store/reducers/index.ts","helpers/axios.ts","store/sagas/setupWizardSaga.ts","store/sagas/index.ts","store/index.ts","index.tsx","store/actions/setupWizardActions.ts","types/SetupWizardTypes.ts","types/index.ts"],"names":["MigrationSteps","lazy","App","props","fallback","className","defaults","steps","generatedOrderForms","i18n","reducers","combineReducers","setupWizard","state","action","type","ESetupWizardTypes","SET_WIZARD_STEPS","payload","SET_API_KEYS","data","consumer_key","consumer_secret","stepsCopy","step2","find","x","id","is_valid","map","step","SET_GENERATED_ORDER_FORMS","headers","setup_wizard_options","nonce","axios","create","baseURL","root","timeout","fetchSteps","generateAPIKeys","migrateOldForms","setupDone","call","axiosInstance","get","params","migration","response","put","setupWizardActions","setWizardSteps","console","log","post","uid","success","setAPIKeys","successCB","failCB","setGeneratedOrderForms","actionListener","takeEvery","FETCH_STEPS","GENERATE_API_KEYS","MIGRATE_OLD_FORMS","SETUP_DONE","rootSaga","all","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","sagas","ReactDOM","render","StrictMode","document","getElementById","status","title"],"mappings":"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","file":"static/js/main.f8ed6220.chunk.js","sourcesContent":["import { Suspense, lazy } from \"react\";\nimport { Spin } from \"antd\";\n\nimport \"./App.scss\";\nimport \"antd/dist/antd.css\";\nconst MigrationSteps = lazy(() => import(\"components/MigrationSteps\"));\n\nconst App = (props: any) => {\n  return (\n    <Suspense\n      fallback={\n        <div className=\"loading-spinner\">\n          <Spin /> &nbsp;Loading...\n        </div>\n      }\n    >\n      <MigrationSteps />\n    </Suspense>\n  );\n};\n\nexport default App;\n","import { ESetupWizardTypes, ISetupWizard } from \"types/index\";\n\nexport const defaults = {\n  steps: [],\n  generatedOrderForms: [],\n  i18n: []\n};\n\nexport default function orderFormReducer(\n  state: ISetupWizard = defaults,\n  action: any\n) {\n  switch (action.type) {\n    case ESetupWizardTypes.SET_WIZARD_STEPS:\n      const { steps, i18n } = action.payload;\n      return {\n        ...state,\n        steps,\n        i18n\n      };\n\n    case ESetupWizardTypes.SET_API_KEYS:\n      const { consumer_key, consumer_secret } = action.payload.data;\n\n      const stepsCopy = [...state.steps];\n      const step2 = stepsCopy.find((x: any) => x.id === \"step2\");\n      if (typeof step2 !== \"undefined\") {\n        step2[\"data\"] = { is_valid: true, consumer_key, consumer_secret };\n      }\n\n      return {\n        ...state,\n        steps: state.steps.map((step: any) => {\n          if (step.id === \"step2\") {\n            step.data = { is_valid: true, consumer_key, consumer_secret };\n          }\n          return step;\n        })\n      };\n\n    case ESetupWizardTypes.SET_GENERATED_ORDER_FORMS:\n      return {\n        ...state,\n        generatedOrderForms: action.payload.data\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\n// Reducers\nimport setupWizardReducer from \"./setupWizardReducer\";\n\nconst reducers = combineReducers({\n  setupWizard: setupWizardReducer,\n});\n\nexport default reducers;\n","import axios from \"axios\";\nimport { ISetupWizardOptions } from \"types/index\";\n\ndeclare var setup_wizard_options: ISetupWizardOptions;\n\nlet headers = {};\n\nif (\n  typeof setup_wizard_options !== \"undefined\" &&\n  setup_wizard_options.nonce !== \"\"\n) {\n  headers = {\n    \"X-WP-Nonce\": setup_wizard_options.nonce,\n  };\n}\n\nexport default axios.create({\n  baseURL: setup_wizard_options.root,\n  timeout: 0,\n  headers: {\n    ...headers,\n  },\n});\n","import { takeEvery, put, call } from \"redux-saga/effects\";\nimport { setupWizardActions } from \"store/actions/index\";\nimport { ESetupWizardTypes, IResponseGenerator } from \"types/index\";\nimport axiosInstance from \"helpers/axios\";\nimport { ISetupWizardOptions } from \"types/index\";\n\ndeclare var setup_wizard_options: ISetupWizardOptions;\n\nexport function* fetchSteps(action: any) {\n  try {\n    const response: IResponseGenerator = yield call(() =>\n      axiosInstance.get(`wwof/v1/setup-wizard/`, {\n        params: {\n          migration: setup_wizard_options.migration\n        }\n      })\n    );\n\n    if (response && response.data) {\n      yield put(\n        setupWizardActions.setWizardSteps({\n          steps: response.data.steps,\n          i18n: response.data.i18n\n        })\n      );\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* generateAPIKeys(action: any) {\n  try {\n    const response: IResponseGenerator = yield call(() =>\n      axiosInstance.post(`wwof/v1/api-keys/`, {\n        uid: setup_wizard_options.uid\n      })\n    );\n\n    if (response && response.data && response.data?.success === true) {\n      yield put(setupWizardActions.setAPIKeys(response.data));\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* migrateOldForms(action: any) {\n  try {\n    const { successCB, failCB } = action.payload;\n    const response: IResponseGenerator = yield call(() =>\n      axiosInstance.post(`wwof/v1/setup-wizard/`, {\n        migration: setup_wizard_options.migration\n      })\n    );\n\n    if (response && response.data && response.data?.success === true) {\n      yield put(setupWizardActions.setGeneratedOrderForms(response.data));\n\n      if (typeof successCB === \"function\") successCB(response);\n      else if (typeof failCB === \"function\") failCB();\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport function* setupDone(action: any) {\n  try {\n    const { successCB, failCB } = action.payload;\n    const response: IResponseGenerator = yield call(() =>\n      axiosInstance.post(`wwof/v1/setup-wizard/setup-done/`)\n    );\n\n    if (response && response.data && response.data?.success === true) {\n      if (typeof successCB === \"function\") successCB(response);\n      else if (typeof failCB === \"function\") failCB(response);\n    }\n  } catch (e) {\n    console.log(e);\n  }\n}\n\nexport const actionListener = [\n  takeEvery(ESetupWizardTypes.FETCH_STEPS, fetchSteps),\n  takeEvery(ESetupWizardTypes.GENERATE_API_KEYS, generateAPIKeys),\n  takeEvery(ESetupWizardTypes.MIGRATE_OLD_FORMS, migrateOldForms),\n  takeEvery(ESetupWizardTypes.SETUP_DONE, setupDone)\n];\n","import { all } from \"redux-saga/effects\";\n\n// Sagas\nimport * as setupWizard from \"./setupWizardSaga\";\n\nexport default function* rootSaga() {\n  yield all([...setupWizard.actionListener]);\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducers from \"./reducers\";\nimport sagas from \"./sagas\";\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\n// redux dev tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// mount it on the Store\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\n// then run the saga\nsagaMiddleware.run(sagas);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport { ISetupWizardOptions } from \"types/index\";\n\n// Store\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { Result } from \"antd\";\n\ndeclare var setup_wizard_options: ISetupWizardOptions;\n\nif (typeof setup_wizard_options.root !== \"undefined\") {\n  ReactDOM.render(\n    <Provider store={store}>\n      <BrowserRouter>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </BrowserRouter>\n    </Provider>,\n    document.getElementById(\"wwof-setup-wizard\")\n  );\n} else {\n  ReactDOM.render(\n    <Result\n      status=\"warning\"\n      title=\"You have missing environment variables. Please see readme.txt for the proper setup.\"\n    />,\n    document.getElementById(\"wwof-setup-wizard\")\n  );\n}\n","import { ESetupWizardTypes } from \"types/index\";\n\nexport const setupWizardActions = {\n  fetchSteps: (payload: any) => ({\n    type: ESetupWizardTypes.FETCH_STEPS,\n    payload,\n  }),\n  setWizardSteps: (payload: any) => ({\n    type: ESetupWizardTypes.SET_WIZARD_STEPS,\n    payload,\n  }),\n  generateAPIKeys: (payload: any) => ({\n    type: ESetupWizardTypes.GENERATE_API_KEYS,\n    payload,\n  }),\n  setAPIKeys: (payload: any) => ({\n    type: ESetupWizardTypes.SET_API_KEYS,\n    payload,\n  }),\n  migrateOldForms: (payload: any) => ({\n    type: ESetupWizardTypes.MIGRATE_OLD_FORMS,\n    payload,\n  }),\n  setGeneratedOrderForms: (payload: any) => ({\n    type: ESetupWizardTypes.SET_GENERATED_ORDER_FORMS,\n    payload,\n  }),\n  setupDone: (payload: any) => ({\n    type: ESetupWizardTypes.SETUP_DONE,\n    payload,\n  }),\n};\n","export enum ESetupWizardTypes {\n  FETCH_STEPS = \"FETCH_STEPS\",\n  SET_WIZARD_STEPS = \"SET_WIZARD_STEPS\",\n  GENERATE_API_KEYS = \"GENERATE_API_KEYS\",\n  SET_API_KEYS = \"SET_API_KEYS\",\n  MIGRATE_OLD_FORMS = \"MIGRATE_OLD_FORMS\",\n  SET_GENERATED_ORDER_FORMS = \"SET_GENERATED_ORDER_FORMS\",\n  SETUP_DONE = \"SETUP_DONE\"\n}\n\nexport interface ISetupWizard {\n  steps: any[];\n  generatedOrderForms: any[];\n  i18n: any[];\n}\n\nexport interface ISetupWizardOptions {\n  ajaxurl: string;\n  root: string;\n  nonce: string;\n  uid: number;\n  migration: string;\n}\n","export * from \"./IResponseGenerator\";\n\n// Setup Wizard\nexport * from \"./SetupWizardTypes\";\n"],"sourceRoot":""}